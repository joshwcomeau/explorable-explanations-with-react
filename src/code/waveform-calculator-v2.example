class WaveformCalculator extends PureComponent {
  static propTypes = {
    shape: PropTypes.oneOf(VALID_SHAPES),
    width: PropTypes.number.isRequired,
    height: PropTypes.number.isRequired,
    frequency: PropTypes.number.isRequired,
    amplitude: PropTypes.number.isRequired,
    children: PropTypes.func.isRequired,
  };

  state = {
    tweenCount: 0,
    tweenFromShape: this.props.shape,
  };

  UNSAFE_componentWillReceiveProps(nextProps: Props) {
    if (this.props.shape !== nextProps.shape) {
      this.setState({
        tweenCount: this.state.tweenCount + 1,
        tweenFromShape: this.props.shape,
      });
    }
  }

  render() {
    const { children, ...waveformData } = this.props;
    const { tweenCount, tweenFromShape } = this.state;

    const tweenAmount = spring(tweenCount % 2, SPRING_SETTINGS);

    return (
      <Motion style={{ tweenAmount }}>
        {({ tweenAmount }) => {
          const fromPoints = getPointsForWaveform({
            ...waveformData,
            shape: tweenFromShape,
          });
          const toPoints = getPointsForWaveform(waveformData);
          const ratio = tweenCount % 2 !== 0 ? tweenAmount : 1 - tweenAmount;

          const points = applyWaveformAddition(fromPoints, toPoints, ratio);

          return children(points);
        }}
      </Motion>
    );
  }
}
