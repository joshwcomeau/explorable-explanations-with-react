class WaveformCalculator extends PureComponent {
  static propTypes = {
    shape: PropTypes.oneOf(VALID_SHAPES),
    width: PropTypes.number.isRequired,
    height: PropTypes.number.isRequired,
    frequency: PropTypes.number.isRequired,
    amplitude: PropTypes.number.isRequired,
    children: PropTypes.func.isRequired,
  };

  state = {
    tweenFrom: this.props.shape,
    tweenTo: this.props.shape,
    tweenCount: 0,
  };

  static getDerivedStateFromProps(
    nextProps,
    prevState
  ) {
    if (
      nextProps.shape !== prevState.tweenTo
    ) {
      return {
        tweenCount: prevState.tweenCount + 1,
        tweenFrom: prevState.tweenTo,
        tweenTo: nextProps.shape,
      };
    }

    return null;
  }

  render() {
    const {
      children,
      amplitude,
      frequency,
      width,
      height,
    } = this.props;
    const {
      tweenCount,
      tweenFrom,
      tweenTo,
    } = this.state;

    return (
      <Motion
        style={{
          amplitude: spring(amplitude),
          frequency: spring(frequency),
          tweenAmount: spring(tweenCount % 2),
        }}
      >
        {({
          amplitude,
          frequency,
          tweenAmount,
        }) => {
          const from = getPointsForWaveform({
            amplitude,
            frequency,
            width,
            height,
            shape: tweenFrom,
          });
          const to = getPointsForWaveform({
            amplitude,
            frequency,
            width,
            height,
            shape: tweenTo,
          });
          const ratio = tweenCount % 2 !== 0
            ? tweenAmount
            : 1 - tweenAmount;

          const points = addWaveformPoints(
            from,
            to,
            ratio
          );

          return children(points);
        }}
      </Motion>
    );
  }
}
